apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: externaldns
  labels:
    app.kubernetes.io/name: external-dns

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
  namespace: externaldns
  labels:
    app.kubernetes.io/name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services","endpoints","pods","nodes"]
    verbs: ["get","watch","list"]
  - apiGroups: ["extensions","networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get","watch","list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
  namespace: externaldns
  labels:
    app.kubernetes.io/name: external-dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: externaldns # Change to desired namespace: kube-addons

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns # The name of the deployment
  namespace: externaldns # The namespace in which the deployment will be created
  labels:
    app.kubernetes.io/name: external-dns
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: external-dns # The label used to match this deployment with its corresponding replica set
  template: # The template used to create the pods
    metadata:
      labels:
        app.kubernetes.io/name: external-dns # The label used to identify the pods created by this deployment
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns # The name of the container
          image: registry.k8s.io/external-dns/external-dns:v0.13.2 # The image used for the container
          args: # The arguments passed to the container when it is started
            - --source=service
            - --source=ingress
            - --domain-filter=exchangeweb.net # Will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
            - --provider=$(PROVIDER)
            - --policy=upsert-only # Would prevent ExternalDNS from deleting any records, omit to enable full synchronization
            - --aws-zone-type=public # Only look at public hosted zones (valid values are public, private or no value for both)
            - --registry=txt
            - --txt-owner-id=external-dns
            - --aws-assume-role=arn:aws:iam::401413892014:role/R53-Records-Management
          env:
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: external-dns-config
                  key: AWS_REGION
            - name: DOMAIN_FILTER
              valueFrom:
                configMapKeyRef:
                  name: external-dns-config
                  key: DOMAIN_FILTER
            - name: TXT_OWNER_ID
              valueFrom:
                configMapKeyRef:
                  name: external-dns-config
                  key: TXT_OWNER_ID
            - name: PROVIDER
              valueFrom:
                configMapKeyRef:
                  name: external-dns-config
                  key: PROVIDER
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: external-dns-config
                  key: LOG_LEVEL
            - name: RBAC
              valueFrom:
                configMapKeyRef:
                  name: external-dns-config
                  key: RBAC 

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: external-dns-config
  namespace: externaldns
data:
  AWS_REGION: "us-east-1"
  DOMAIN_FILTER: "exchangeweb.net" # The domain name that you want to manage with external-dns
  TXT_OWNER_ID: "external-dns" #  A unique identifier for your cluster. This is used to create a Route53 TXT record that identifies your cluster
  PROVIDER: "aws"
  LOG_LEVEL: "info" # The log level for external-dns
  RBAC: "true"
